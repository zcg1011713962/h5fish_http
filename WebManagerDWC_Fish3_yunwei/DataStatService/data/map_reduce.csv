fun,map,reduce,描述,isLoadFromFile,结束标志(不能删)
recharge,"function Map() 
{
  emit( this.acc, {total: this.rmb, rechargeCount : 1} ); 
}","function Reduce(key, values) 
{
 var reduced = {total:0, rechargeCount : 0};

 values.forEach(function(val) {
  reduced.total += val.total;  
  reduced.rechargeCount += val.rechargeCount;  
 });

 return reduced; 
}",充值的统计,0,$
rechargePayType,"function Map() 
{
 if(this.pay_type==undefined)
  return;
  
 emit( this.pay_type, {total: this.rmb, rechargeCount : 1, acc:this.acc, rechargePerson:1} );
}

","
function Reduce(key, values) 
{
 var reduced = {total: 0, rechargeCount : 0, acc:'1111', rechargePerson:0};
 var accs={};
 var count = 0;
 
 values.forEach(function(val) {
   reduced.total += val.total;  
   reduced.rechargeCount += val.rechargeCount;  
   if(accs[val.acc]==undefined)
   {
  count++;
  accs[val.acc]=true;
   }
   
  });
 reduced.rechargePerson=count;
 return reduced; 
}",各渠道充值方式的统计,0,$
active,"function Map() 
{
  emit( this.acc_real, {total: 1} ); 
}","function Reduce(key, values) 
{
 var reduced = {total:0};

 return reduced; 
}",活跃统计,0,$
totalMoney,"function Map() 
{
  emit( 1, {total: this.gold, box:this.safeBoxGold} ); 
}","function Reduce(key, values) 
{
 var reduced = {total:0, box:0};

 values.forEach(function(val) {
  reduced.total += val.total; 
  reduced.box += val.box;  
 });

 return reduced; 
}",每日所有玩家总的金币,0,$
dragonBallPlayer,"function Map() {

 var val = {dbgain: 0, dbsend:0, dbaccept:0, dbexchange:0, goldByRecharge:0,goldByOther:0,goldConsume:0,
 gemByRecharge:0,gemByOther:0,gemConsume:0};
 
 if(this.itemId == 1)
 {
  var goldAdd = this.newValue - this.oldValue;
  if(goldAdd > 0)
  {
   if(this.reason==21)
   {
    val.goldByRecharge=goldAdd;
   }
   else
   {
    val.goldByOther=goldAdd;
   }
  }
  else{
   val.goldConsume=-goldAdd;
  }
  emit(this.playerId, val); 
 }
 else if(this.itemId == 2)
 {
  var gemAdd = this.newValue - this.oldValue;
  if(gemAdd>0)
  {
   if(this.reason==21)
   {
    val.gemByRecharge=gemAdd;
   }
   else
   {
    val.gemByOther=gemAdd;
   }
  }
  else{
   val.gemConsume=-gemAdd;
  }
  emit(this.playerId, val); 
 }
 else if(this.itemId==14)
 {
  var dbDelta = this.newValue - this.oldValue;
  var dbDeltaAbs = dbDelta>0?dbDelta:-dbDelta;
  if(this.reason==5)
  {
   val.dbsend=dbDeltaAbs;
  }
  else if(this.reason==6)
  {
   val.dbaccept=dbDeltaAbs;
  }
  else if(this.reason==8)
  {
   val.dbexchange=dbDeltaAbs;
  }
  else
  {
   if(dbDelta>0)
   {
    val.dbgain=dbDelta;
   }
  }
  
  emit(this.playerId, val); 
 }
 
}

","
function Reduce(key, values) {

 var reduced =  {dbgain: 0, dbsend:0, dbaccept:0, dbexchange:0, goldByRecharge:0,goldByOther:0,goldConsume:0,
 gemByRecharge:0,gemByOther:0,gemConsume:0};

 values.forEach(function(val) {
  reduced.dbgain += val.dbgain; 
  reduced.dbsend += val.dbsend; 
  reduced.dbaccept += val.dbaccept; 
  reduced.dbexchange += val.dbexchange; 
  
  reduced.goldByRecharge += val.goldByRecharge; 
  reduced.goldByOther += val.goldByOther; 
  reduced.goldConsume += val.goldConsume; 
  
  reduced.gemByRecharge += val.gemByRecharge; 
  reduced.gemByOther += val.gemByOther; 
  reduced.gemConsume += val.gemConsume; 
 });

 return reduced; 
}",玩家的龙珠统计,0,$
dragonBallDaily,DragonBallDaily.js,,龙珠每日总计,1,$
dragonBallSum,"function Map() 
{
  emit( 1, {total: this.dragonBall} ); 
}","function Reduce(key, values) 
{
 var reduced = {total:0};

 values.forEach(function(val) {
  reduced.total += val.total; 
 });

 return reduced; 
}",所有玩家的龙珠总和,0,$
playerOnlineTime,"function Map() {

 var delta = this.exitTime - this.loginTime;
 
 emit( this.playerId, {onlineTimeSum:delta} ); 
 
}","function Reduce(key, values) {

 var reduced = {onlineTimeSum:0};

 values.forEach(function(val) {
  reduced.onlineTimeSum += val.onlineTimeSum; 
 });

 return reduced; 
}",玩家在线时间总和,,$
incomeExpenses,"function Map() {

 var val = {goldFreeGain:0, goldRechargeGain:0, goldConsume:0, 
      gemFreeGain:0, gemRechargeGain:0, gemConsume:0,
      dbFreeGain:0,  dbConsume:0,dbDrop:0,
      chipFreeGain:0, chipConsume:0};
 var isEmit = true;
 var delta = this.newValue-this.oldValue;
 var absDelta = delta >0?delta:-delta;
 
 switch(this.itemId)
 {
 case 1:
  {
   if(isRecharge(this.reason))
   {
    val.goldRechargeGain = absDelta;
   }
   else
   {
    if(delta >0)
    {
     val.goldFreeGain = delta;
    }
    else
    {
     val.goldConsume = absDelta;
    }
   }
  }
  break;
 case 2:
  {
   if(isRecharge(this.reason))
   {
    val.gemRechargeGain = absDelta;
   }
   else
   {
    if(delta >0)
    {
     val.gemFreeGain = delta;
    }
    else
    {
     val.gemConsume = absDelta;
    }
   }
  }
  break;
 case 11:
  {
   if(delta >0)
   {
    val.chipFreeGain = delta;
   }
   else
   {
    val.chipConsume = absDelta;
   }
  }
  break;
 case 14:
  {
   if(delta >0)
   {
    val.dbFreeGain = delta;
   }
   else
   {
    val.dbConsume = absDelta;
   }
   if(this.reason == 30)
   {
    val.dbDrop=delta;
   }
  }
  break;
 default:
  {
   isEmit = false;
  }
  break;
 }
 if(isEmit)
 {
  emit(this.playerId, val);
 }
 
 function isRecharge(reason)
 {
  return reason == 18 || reason == 20 || reason == 21 || reason == 22 || reason == 24;
 }
}","function Reduce(key, values) {


 var reduced = {goldFreeGain:0, goldRechargeGain:0, goldConsume:0, 
       gemFreeGain:0, gemRechargeGain:0, gemConsume:0,
       dbFreeGain:0,  dbConsume:0,dbDrop:0,
       chipFreeGain:0, chipConsume:0};

 values.forEach(function(val) {
  reduced.goldFreeGain   += val.goldFreeGain; 
  reduced.goldRechargeGain += val.goldRechargeGain; 
  reduced.goldConsume += val.goldConsume; 
  
  reduced.gemFreeGain   += val.gemFreeGain; 
  reduced.gemRechargeGain += val.gemRechargeGain; 
  reduced.gemConsume += val.gemConsume; 
  
  reduced.dbFreeGain   += val.dbFreeGain; 
  reduced.dbConsume += val.dbConsume; 
  reduced.dbDrop += val.dbDrop; 
  
  reduced.chipFreeGain += val.chipFreeGain; 
  reduced.chipConsume += val.chipConsume; 
 });

 return reduced; 
}",玩家总收支,0,$
incomeExpensesNew,IncomeExpensesNew.js,,玩家总收支(新),1,$
incomeExpensesRemain,"function Map() 
{
  emit( 1, {goldRemain: this.gold, gemRemain:this.ticket, dbRemain:this.dragonBall, chipRemain:this.chip} ); 
}","function Reduce(key, values) 
{
 var reduced = {goldRemain: 0, gemRemain:0, dbRemain:0, chipRemain:0};

 values.forEach(function(val) {
  reduced.goldRemain += val.goldRemain; 
  reduced.gemRemain += val.gemRemain; 
  reduced.dbRemain += val.dbRemain; 
  reduced.chipRemain += val.chipRemain; 
 });

 return reduced; 
}",玩家总收支数据库结余,0,$
gameTimeForPlayerFavor,"function Map() {
  
  var v = {playerCount:1};
  var gid='';
  for(var i = 0; i <= 30; i++)
  {
   gid = 'game' +i;
   if(this[gid])
 {
  v[gid] = this[gid];
 }
 else
 {
  v[gid] = 0;
 }  
  }
 
   emit(1, v); 
   
   if(this.isRecharge)
   {
     emit(2, v);
   }
   
   if(isNewPlayer(this.createTime))
   {
     emit(3, v);
   }
   
   function isNewPlayer(createTime)
   {
  var cur = new Date();
  var a = cur.valueOf() - 24 * 60 * 60 * 1000;
  var curDate = new Date(a);
  
  if(curDate.getFullYear() == createTime.getFullYear() &&
   curDate.getMonth() == createTime.getMonth() &&
   curDate.getDate() == createTime.getDate())
  {
   return true;
  }
  return false;
   }
}","function Reduce(key, values) {
  var reduced =  {playerCount:0};
  for(var i = 0; i <= 30; i++)
  {
   reduced['game'+i] = 0;
  }
 
 values.forEach(function(val) {
  
  reduced.playerCount += val.playerCount;
 
   for(var i = 0; i <= 30; i++)
   {
    reduced['game'+i] += val['game'+i];
   }
   
  });

  return reduced; 
}",玩家喜好，各游戏内在线时间,0,$
gameTimeDistribution,"function Map() {

 var result = {};
 var i = 0;
 for(i = 0; i < 30;i++)
 {
  result[i] = {Less10s:0,Less30s:0, Less60s:0, Less5min:0, Less10min:0, Less30min:0, Less60min:0, GT60min:0};
 }
 
 var key = '';
 for(i = 0; i < 30; i++)
 {
  key = 'game' + i;
  if(this[key]!=undefined)
  {
   cal(this[key], i);
   emit( i, result[i] ); 
  }
 }
  
 function cal(gameTime, gameId)
 {
  var val = result[gameId];
  if(gameTime < 10)
  {
   val.Less10s = 1;
  }
  else if(gameTime < 30)
  {
   val.Less30s = 1;
  }
  else if(gameTime < 60)
  {
   val.Less60s = 1;
  }
  else if(gameTime < 300)
  {
   val.Less5min = 1;
  }
  else if(gameTime < 600)
  {
   val.Less10min = 1;
  }
  else if(gameTime < 1800)
  {
   val.Less30min = 1;
  }
  else if(gameTime < 3600)
  {
   val.Less60min = 1;
  }
  else
  {
   val.GT60min = 1;
  }
 }
}","function Reduce(key, values) {


 var reduced = {Less10s:0,Less30s:0, Less60s:0, Less5min:0, Less10min:0, Less30min:0, Less60min:0, GT60min:0};

 values.forEach(function(val) {
  reduced.Less10s += val.Less10s; 
  reduced.Less30s += val.Less30s; 
  
  reduced.Less60s += val.Less60s; 
  reduced.Less5min += val.Less5min; 
  reduced.Less10min += val.Less10min; 
  reduced.Less30min += val.Less30min; 
  reduced.Less60min += val.Less60min; 
  reduced.GT60min += val.GT60min; 
 });

 return reduced; 
}",平均游戏时长分布,0,$
firstRechargeGameTimeDistribution,"function Map() {

 if(this.firstRechargeTime == undefined || this.regTime == undefined || this.firstRechargeGameTime==undefined)
  return;
  
 var result = {Less1min:0, Less10min:0, Less30min:0, Less60min:0, Less3h:0, Less5h:0, Less12h:0, Less24h:0, GT24h:0};
 var playerType = 1;
 if(isSameDate(this.firstRechargeTime, this.regTime))
 {
  playerType = 3;
 }
 
 cal(this.firstRechargeGameTime);
 emit(playerType, result); 
 
 function isSameDate(date1, date2)
 {
  var y1 = date1.getFullYear();
  var m1 = date1.getMonth();
  var d1 = date1.getDate();
  
  var y2 = date2.getFullYear();
  var m2 = date2.getMonth();
  var d2 = date2.getDate();
 
  return y1==y2 && m1==m2 && d1==d2; 
 }
 
 function cal(gameTime)
 {
  if(gameTime <= 60)
  {
   result.Less1min = 1;
  }
  else if(gameTime <= 600)
  {
   result.Less10min = 1;
  }
  else if(gameTime <= 1800)
  {
   result.Less30min = 1;
  }
  else if(gameTime <= 3600)
  {
   result.Less60min = 1;
  }
  else if(gameTime <= 10800)
  {
   result.Less3h = 1;
  }
  else if(gameTime <= 18000)
  {
   result.Less5h = 1;
  }
  else if(gameTime <= 43200)
  {
   result.Less12h = 1;
  }
  else if(gameTime <= 86400)
  {
   result.Less24h = 1;
  }
  else
  {
   result.GT24h = 1;
  }
 }
}","function Reduce(key, values) {

 var reduced = {Less1min:0, Less10min:0, Less30min:0, Less60min:0, Less3h:0, Less5h:0, Less12h:0, Less24h:0, GT24h:0};

 values.forEach(function(val) {
  reduced.Less1min   += val.Less1min; 
  reduced.Less10min += val.Less10min; 
  reduced.Less30min += val.Less30min; 
  reduced.Less60min += val.Less60min; 
  reduced.Less3h += val.Less3h; 
  reduced.Less5h += val.Less5h; 
  reduced.Less12h += val.Less12h; 
  reduced.Less24h += val.Less24h; 
  reduced.GT24h += val.GT24h; 
 });

 return reduced; 
}",首付游戏时长分布,0,$
firstRechargePointDistribution,"function Map() {

 if(this.firstRechargeTime == undefined || this.regTime == undefined || this.firstRechargePoint==undefined)
  return;
  
 var result = {};
 var playerType = 1;
 if(isSameDate(this.firstRechargeTime, this.regTime))
 {
  playerType = 3;
 }
 
 result[this.firstRechargePoint]=1;
 emit(playerType, result); 
 
 function isSameDate(date1, date2)
 {
  var y1 = date1.getFullYear();
  var m1 = date1.getMonth();
  var d1 = date1.getDate();
  
  var y2 = date2.getFullYear();
  var m2 = date2.getMonth();
  var d2 = date2.getDate();
 
  return y1==y2 && m1==m2 && d1==d2; 
 }
}","function Reduce(key, values) {

 var reduced = {};

 values.forEach(function(val) {
 
  for(var pay in val)
  {
   if(reduced[pay])
   {
    reduced[pay] += val[pay];
   }
   else
   {
    reduced[pay] = val[pay];
   }
  }
 });

 return reduced; 
}",首次购买计费点分布,0,$
userGameBet,"function Map() {

 if(this.reason!=11)
  return;
  
 var data1 = genData(); var data2 = genData();
 var groupData = {""1"":data1,""14"":data2};

 var cur = groupData[this.itemId+''];
 if(cur == undefined) return;
 cur.sumStart = this.oldValue;
 cur.maxStart = this.oldValue;
 cur.minStart = this.oldValue;
 if(this.playerOutlay != undefined)
 {
  cur.sumOutlay = this.playerOutlay;
  cur.maxOutlay=this.playerOutlay;
  cur.minOutlay=this.playerOutlay;
 }
 
 var delta = this.newValue-this.oldValue;
 if(delta > 0)
 {
  cur.sumWin = delta;
  cur.maxWin = delta;
  cur.minWin= delta;
 }
 else
 {
  cur.sumLose = -delta;
  cur.maxLose = -delta;
  cur.minLose = -delta;
 }
 cur.round = 1;
 
 emit(this.playerId, groupData);
 
 function genData()
 {
  var data ={sumStart:0, maxStart:0, minStart:0, 
    sumOutlay:0, maxOutlay:0, minOutlay:0,
    sumWin:0,maxWin:0,minWin:0,
    sumLose:0,maxLose:0,minLose:0,round:0};
  return data;
 } 
}","function Reduce(key, values) {

  var data1 = genData();
  var data2 = genData();
  var reduced = {""1"":data1, ""14"":data2};

 values.forEach(function(val) {
  
   for(var key in val)
   {
     var cur = val[key];
     var res = reduced[key];
    
     res.sumStart += cur.sumStart;
     res.sumOutlay += cur.sumOutlay;
     res.sumWin += cur.sumWin;
     res.sumLose += cur.sumLose;
     res.round += cur.round;
     
     if(cur.maxStart > res.maxStart)
     {
       res.maxStart = cur.maxStart;
     }
  
     if(res.minStart==0)
     {
      res.minStart = cur.minStart;
     }
     else if(cur.minStart < res.minStart)
     {
      res.minStart = cur.minStart;
     }
    
     if(cur.maxOutlay > res.maxOutlay)
     {
      res.maxOutlay = cur.maxOutlay;
     }
     if(res.minOutlay==0)
     {
      res.minOutlay = cur.minOutlay;
     }
     else if(cur.minOutlay < res.minOutlay)
     {
      res.minOutlay = cur.minOutlay;
     }
    
     if(cur.maxWin > 0)
     {
      if(cur.maxWin > res.maxWin)
      {
       res.maxWin = cur.maxWin;
      }
      if(res.minWin == 0)
      {
       res.minWin = cur.minWin;
      }
      else if(cur.minWin < res.minWin)
      {
       res.minWin = cur.minWin;
      }
     }
    
     if(cur.sumLose > 0)
     {
     if(cur.maxLose > res.maxLose)
     {
      res.maxLose = cur.maxLose;
     }
     if(res.minLose ==0)
     {
      res.minLose = cur.minLose;
     }
     else if(cur.minLose < res.minLose)
     {
      res.minLose = cur.minLose;
     }
    }
  }
  
 });

 return reduced; 
 
 function genData()
 {
  var data ={sumStart:0, maxStart:0, minStart:0, 
    sumOutlay:0, maxOutlay:0, minOutlay:0,
    sumWin:0,maxWin:0,minWin:0,
    sumLose:0,maxLose:0,minLose:0,round:0};
  return data;
 }
}

",携带量，下注量，当日流水统计。用户下注情况统计,0,$
iteratorPlayer,"function Map() 
{
 emit(this.playerId, {});
}
","function Reduce(key, values) 
{
 var retVal = {};
 return retVal;
}",遍历playerId,0,$
newPlayerOutlay,"function Map() 
{
 if(this.playerOutlay==undefined)
  return;
  
 var val={playerOutlay:this.playerOutlay};
 emit( this.playerId, val );
}","function Reduce(key, values) 
{
 var reduced = {playerOutlay:0};

 values.forEach(function(val) {
   reduced.playerOutlay += val.playerOutlay; 
  });
  
 return reduced; 
 }
",新增玩家下注,0,$
newPlayerOutlayDistribution,"function Map() 
{
 var range=[1000, 2000, 5000, 10000, 20000, 50000, 100000, 1000000, 10000000, 100000000];
 var val={};
 for(var i = 0; i < range.length + 1; i++)
 {
  val[i] = 0;
 }
 
 var index = getRange(this.value.playerOutlay);
 val[index] = 1;
 emit( 1, val );
 
 function getRange(value)
 {
  var i = 0;
  for(i = 0; i < range.length; i++)
  {
   if(value <= range[i])
    return i;
  }
  
  return i;
 }
}","
function Reduce(key, values) 
{
 var range=[1000, 2000, 5000, 10000, 20000, 50000, 100000, 1000000, 10000000, 100000000];
 var reduced={};
 for(var i = 0; i < range.length + 1; i++)
 {
  reduced[i] = 0;
 }
 
 values.forEach(function(val) {
   for(var i = 0; i < range.length + 1; i++)
   {
  reduced[i] += val[i];
   }
 });
  
 return reduced;
}",新增玩家下注分布,0,$
newPlayerFireCountDistribution,"function Map() 
{
 var range=[50, 700, 1400, 2700, 5400, 8100];
 var val={};
 for(var i = 0; i < range.length + 1; i++)
 {
  val[i] = 0;
 }
 
 var index = getRange(this.fireCount);
 val[index] = 1;
 emit( 1, val );
 
 function getRange(value)
 {
  var i = 0;
  for(i = 0; i < range.length; i++)
  {
   if(value <= range[i])
    return i;
  }
  
  return i;
 }
}

","
function Reduce(key, values) 
{
 var range=[50, 700, 1400, 2700, 5400, 8100];
 var reduced={};
 for(var i = 0; i < range.length + 1; i++)
 {
  reduced[i] = 0;
 }
 
 values.forEach(function(val) {
   for(var i = 0; i < range.length + 1; i++)
   {
  reduced[i] += val[i];
   }
 });
  
 return reduced;
}",新增玩家炮数分布,0,$
newPlayerFishLevelDistribution,"function Map() 
{
 var val={};
 for(var i = 1; i <= 50; i++)
 {
  val[i] = 0;
 }
 
 val[this.fishLevel] = 1;
 emit( 1, val );
}
","
function Reduce(key, values) 
{
 var reduced={};
 for(var i = 1; i <= 50; i++)
 {
  reduced[i] = 0;
 }
 
 values.forEach(function(val) {
  for(var i = 1; i <= 50; i++)
   {
 reduced[i] += val[i];
   }
 });
  
 return reduced;
}",新增玩家等级分布,0,$
personTimeGlobalDay,"function Map() 
{
 var val={count:1,playerId:0};
 val.playerId=this.playerId;
 
 emit( this.fishId, val );
}
","
function Reduce(key, values) 
{
 var reduced={count:0,playerId:0};
 var tmp={};
 
 values.forEach(function(val) {
 if(!tmp[val.playerId])
 {
  reduced.count++;
  tmp[val.playerId]=true;
 }
 });
  
 return reduced;
}",全天打boss人次,0,$
StatStarLottery,StatStarLottery.js,,抽彩圈统计,1,$
StatStarLotteryDetail,StatStarLotteryDetail.js,,抽彩圈统计,1,$
rechargeNew,StatRechargeNew.js,,,1,$
StatLabaPlayer,StatLabaPlayer.js,,拉霸玩家抽奖次数统计,1,$
StatLabaProb,StatLabaProb.js,,拉霸抽奖概率统计,1,$
StatBaoJinMatchPersonCount,StatBaoJinMatchPersonCount.js,,,1,$
StatBaoJinTotal,StatBaoJinTotal.js,,,1,$
StatRechargePoint,StatRechargePoint.js,,,1,$
StatOldPlayerLogin,StatOldPlayerLogin.js,,,1,$
StatSign,StatSign.js,,,1,$
StatRechargeAibei,StatRechargeAibei.js,,,1,$
StatRechargeHourByChannel,StatRechargeHourByChannel.js,,,1,$
StatBaoJinJoinDistribute,StatBaoJinJoinDistribute.js,,,1,$
StatBaoJinJoinCount,StatBaoJinJoinCount.js,,,1,$
StatNYGift,StatNYGift.js,,,1,$
StatWuyiRechargeLottery,StatWuyiRechargeLottery.js,,,1,$
StatPanicBox,StatPanicBox.js,,,1,$
StatRechargePayType,StatRechargePayType.js,,,1,$
StatDragonJoinDistribute,StatDragonJoinDistribute.js,,,1,$
StatNationDay2018,StatNationDay2018.js,,,1,$
StatMoneyRep,StatMoneyRep.js,,,1,$
StatNationDay2018PlayerTask,StatNationDay2018PlayerTask.js,,,1,$
StatFishGameTimeForRoom,StatFishGameTimeForRoom.js,,,1,$
StatItemBuy,StatItemBuy.js,,,1,$
StatTurretLevelTime,StatTurretLevelTime.js,,,1,$
StatVipRecord,StatVipRecord.js,,,1,$
StatTurretItems,StatTurretItems.js,,,1,$
StatDragonPlaceJoinCount,StatDragonPlaceJoinCount.js,,,1,$
StatPlayerWithGold,StatPlayerWithGold.js,,,1,$
StatEnterFishRoom,StatEnterFishRoom.js,,,1,$
StatPlayerExchange,StatPlayerExchange.js,,,1,$
StatChannelPlayer100003,StatChannelPlayer100003.js,,,1,$
StatChannelReg100003,StatChannelReg100003.js,,,1,$
